#!/usr/bin/env node

const fs        = require('fs');
const path      = require('path');
const glob      = require("glob");
const inquirer  = require("inquirer");
const _ 		= require('lodash');
const ora 		= require('ora');
const spawn     = require('child_process').spawn;
const chalk 	= require('chalk');

const utils     = require('../utils/utils.js');
const logger    = require('../utils/logger.js');
const CONSTANTS = require('../config');

const CURRENT_PATH = process.cwd()

// const template_folder_path = path.join(CURRENT_PATH, 'node_modules/vug-templates/templates')
// const template_git_path    = CONSTANTS.BASE_TEMPLATE_GIT_PATH

function initAsk(menus){
	menus = menus || MENU.slice(0)

	inquirer.prompt([{
		type: 'list',
		name: 'menu',
		message: '命令行工具，当前版本' + utils.getVersion() + '\n',
		choices: menus.map(i => i.text)
	}]).then(function(answers) {
		let fun = menus.find(i => i.text == answers.menu).fun
		if(fun){
			fun()
		}else{
			logger.log('功能还未实现')
		}
	})
}

function upgrade(){
	logger.success(`发现新版本，更新中...\n`);
	let cmd	= spawn('qy', ['upgrade'])
	cmd.on('exit', (err)=>{
		if(err){
			logger.warn(err)
			logger.warn('vug版本更新失败，使用本地安装版本\n')
		}else{
			logger.success('更新版本完毕\n')
		}
		initAsk()
	})
}

const MENU = [
	{text:'1. 安装依赖包',fun:funs.installDep},
	{text:'2. 更新依赖包',fun:funs.updateDep},
	{text:'3. 新建页面',fun:funs.createRouter},
	{text:'4. 启动开发服务器',fun:funs.startDev},
	{text:'5. 使用调试模式（仅修改js文件host为locahost）',fun:funs.createHTML},
	{text:'6. 编译全部',fun:funs.build},
	// {text:'7. 编译单个文件',fun:funs.buildOne},
	{text:'8. 重建全部入口文件',fun:funs.reCreateEntry},
	{text:'9. 手动更新模板库',fun:funs.manuallyUpdateTemplateRepo},
	{text:'0. 回到初始菜单',fun:initAsk}
]

utils.isLatestVersion().then(upgrade).catch(initAsk);